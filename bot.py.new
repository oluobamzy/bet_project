import os
import asyncio
import discord
from discord.ext import commands
from dotenv import load_dotenv
from discord import app_commands
from predict import predict_bet, predict_bet_tomorrow

import schedule
from datetime import datetime, time

# --- Load environment variables
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå Discord token not found in .env file")

# --- Supported leagues
SUPPORTED_LEAGUES = {
    "EPL": "English Premier League",
    "LaLiga": "Spanish La Liga",
    "SerieA": "Italian Serie A",
    "Bundesliga": "German Bundesliga",
    "Ligue1": "French Ligue 1",
    "PrimeiraLiga": "Portuguese Primeira Liga",
    "Eredivisie": "Dutch Eredivisie",
    "ProLeague": "Belgian Pro League",
    "SPL": "Scottish Premiership",
    "SuperLig": "Turkish S√ºper Lig",
    "BundesligaAT": "Austrian Bundesliga",
    "SuperLeagueCH": "Swiss Super League",
    "Superliga": "Danish Superliga",
    "Eliteserien": "Norwegian Eliteserien",
    "Allsvenskan": "Swedish Allsvenskan",
    "UPL": "Ukrainian Premier League",
    "SuperLeagueGR": "Greek Super League",
    "FortunaLiga": "Czech Fortuna Liga",
    "HNL": "Croatian Prva HNL",
    "SuperLigaRS": "Serbian SuperLiga",
    "Ekstraklasa": "Polish Ekstraklasa",
    "NBI": "Hungarian NB I",
    "Liga1": "Romanian Liga I",
    "FirstDivisionCY": "Cyprus First Division",
    "PremierLeagueIL": "Israeli Premier League"
}

# --- Set up Discord client
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True

bot = commands.Bot(command_prefix="!", intents=intents)
subscribed_users = []  # This is temporary, ideally use a database.

# --- Background task: Auto-scheduling predictions
async def send_daily_predictions():
    await bot.wait_until_ready()
    while not bot.is_closed():
        schedule.run_pending()
        await asyncio.sleep(60)

def daily_job():
    """Send tomorrow's predictions to all guilds and subscribed users."""
    prediction = predict_bet_tomorrow()
    if not prediction.strip():
        print("‚ö†Ô∏è No prediction to send.")
        return

    # Send to each guild's general channel
    for guild in bot.guilds:
        for channel in guild.text_channels:
            if channel.permissions_for(guild.me).send_messages:
                asyncio.create_task(channel.send(
                    f"üìÖ **Tomorrow's Predictions:**\n{prediction}"
                ))
                print(f"‚úÖ Sent prediction to {guild.name} in #{channel.name}")
                break  # Send to only one channel per guild
                
    # Send to subscribed users via DM
    for user_id in subscribed_users:
        try:
            user = bot.get_user(user_id)
            if user:
                asyncio.create_task(user.send(f"üìÖ **Tomorrow's Predictions:**\n{prediction}"))
                print(f"‚úÖ Sent prediction to user {user.name}")
        except Exception as e:
            print(f"‚ùå Failed to send prediction to user {user_id}: {e}")

# --- Schedule the daily job (10:00 AM server time)
schedule.every().day.at("10:00").do(daily_job)

# --- Autocomplete function for leagues
async def autocomplete_leagues(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=name, value=key)
        for key, name in SUPPORTED_LEAGUES.items()
        if current.lower() in key.lower() or current.lower() in name.lower()
    ][:25]

# --- Events
@bot.event
async def on_ready():
    print(f"‚úÖ Bot is now online as {bot.user}")
    asyncio.create_task(send_daily_predictions())
    try:
        synced = await bot.tree.sync()
        print(f"üîó Synced {len(synced)} application commands globally.")
    except Exception as e:
        print(f"‚ùå Failed syncing commands: {e}")

# --- Slash Commands
@bot.tree.command(name="bet", description="Get match predictions for a specific league.")
@app_commands.describe(league="Choose a league")
@app_commands.autocomplete(league=autocomplete_leagues)
async def bet_command(interaction: discord.Interaction, league: str = "EPL"):
    league = league.strip()
    if league not in SUPPORTED_LEAGUES:
        await interaction.response.send_message(f"‚ö†Ô∏è Unknown league `{league}`.", ephemeral=True)
        return

    await interaction.response.defer(thinking=True)
    try:
        prediction = predict_bet(league)
        await interaction.followup.send(
            f"üîÆ **Predictions for {SUPPORTED_LEAGUES[league]}:**\n{prediction}"
        )
    except Exception as e:
        await interaction.followup.send(f"‚ùå Prediction failed: {e}", ephemeral=True)

@bot.tree.command(name="bet_today", description="Get today's match predictions for a specific league.")
@app_commands.describe(league="Choose a league")
@app_commands.autocomplete(league=autocomplete_leagues)
async def bet_today_command(interaction: discord.Interaction, league: str = "EPL"):
    league = league.strip()
    if league not in SUPPORTED_LEAGUES:
        await interaction.response.send_message(f"‚ö†Ô∏è Unknown league `{league}`.", ephemeral=True)
        return

    await interaction.response.defer(thinking=True)
    try:
        prediction = predict_bet(league)
        await interaction.followup.send(
            f"üîÆ **Today's Predictions for {SUPPORTED_LEAGUES[league]}:**\n{prediction}"
        )
    except Exception as e:
        await interaction.followup.send(f"‚ùå Prediction failed: {e}", ephemeral=True)
        
@bot.tree.command(name="bet_tomorrow", description="Get tomorrow's match predictions for a specific league.")
@app_commands.describe(league="Choose a league")
@app_commands.autocomplete(league=autocomplete_leagues)
async def bet_tomorrow_command(interaction: discord.Interaction, league: str = "EPL"):
    league = league.strip()
    if league not in SUPPORTED_LEAGUES:
        await interaction.response.send_message(f"‚ö†Ô∏è Unknown league `{league}`.", ephemeral=True)
        return

    await interaction.response.defer(thinking=True)
    try:
        prediction = predict_bet_tomorrow(league)
        await interaction.followup.send(
            f"üìÖ **Tomorrow's Predictions for {SUPPORTED_LEAGUES[league]}:**\n{prediction}"
        )
    except Exception as e:
        await interaction.followup.send(f"‚ùå Prediction failed: {e}", ephemeral=True)

@bot.tree.command(name="leagues", description="Show all available leagues.")
async def leagues_command(interaction: discord.Interaction):
    message = "**üèÜ Available Leagues:**\n" + "\n".join(
        f"- `{key}`: {name}" for key, name in SUPPORTED_LEAGUES.items()
    )
    await interaction.response.send_message(message, ephemeral=True)

@bot.tree.command(name="subscribe", description="Subscribe to daily prediction updates.")
async def subscribe_command(interaction: discord.Interaction):
    user_id = interaction.user.id
    if user_id in subscribed_users:
        await interaction.response.send_message("‚úÖ You're already subscribed to daily predictions!", ephemeral=True)
    else:
        subscribed_users.append(user_id)
        await interaction.response.send_message("üîî You've been subscribed to daily predictions! You'll receive updates every morning.", ephemeral=True)

@bot.tree.command(name="unsubscribe", description="Unsubscribe from daily prediction updates.")
async def unsubscribe_command(interaction: discord.Interaction):
    user_id = interaction.user.id
    if user_id in subscribed_users:
        subscribed_users.remove(user_id)
        await interaction.response.send_message("üîï You've been unsubscribed from daily predictions.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ö†Ô∏è You're not currently subscribed to daily predictions.", ephemeral=True)

@bot.tree.command(name="help", description="View all available commands.")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìö Help - Available Commands",
        description="Here's what I can do for you!",
        color=discord.Color.blue()
    )
    embed.add_field(name="`/bet [league]`", value="Get match predictions for a specific league.", inline=False)
    embed.add_field(name="`/bet_today [league]`", value="Get today's match predictions for a specific league.", inline=False)
    embed.add_field(name="`/bet_tomorrow [league]`", value="Get tomorrow's match predictions for a specific league.", inline=False)
    embed.add_field(name="`/subscribe`", value="Subscribe to daily prediction updates.", inline=False)
    embed.add_field(name="`/unsubscribe`", value="Unsubscribe from daily prediction updates.", inline=False)
    embed.add_field(name="`/leagues`", value="List all supported leagues.", inline=False)
    embed.add_field(name="`/help`", value="Show this help message.", inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)

# --- Run the bot
if __name__ == "__main__":
    bot.run(TOKEN)
